# -*- coding: utf-8 -*-
"""S3 (ใหม่).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jrTiGO8rMCvnbvSIl027Muco7aS4OcXl

# โค้ดเดิม
"""

!pip install sentence-transformers
!pip install pythainlp
!pip install requests

import re
import requests
from pythainlp.tokenize import word_tokenize
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import json

# ---------- ตั้งค่า ----------
API_KEY = 'PYJ6lQwGuvr8w7OJVThpu3T0yUlrC3af' # add Apikey
TNER_URL = 'https://api.aiforthai.in.th/tner'

# ---------- โหลด Dataset ----------
import pandas as pd
examples_df = pd.read_csv('/content/drive/MyDrive/example_dialect.csv')   # dataset มีคอลัมน์ local_word
pronouns_df = pd.read_csv('/content/drive/MyDrive/personal_pronoun.csv')  # dataset 'personal pronoun 1', 'personal pronoun 2'

example_phrases = examples_df['local_word'].dropna().tolist()
pronouns_1 = pronouns_df['personal pronoun 1'].dropna().tolist()
pronouns_2 = pronouns_df['personal pronoun 2'].dropna().tolist()
pronouns_1_2 = pronouns_1 + pronouns_2

# ---------- บทความอ้างอิง ----------
reference_text = """
สื่อสังคม (Social Media) หรือที่คนทั่วไปเรียกว่า สื่อออนไลน์ หรือ สื่อสังคม ออนไลน์ นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆ ได้อย่างรวดเร็วไปยังผู้คนที่อยู่ทั่วทุกมุมโลก...
"""  # ตัดให้ง่ายขึ้น

# ---------- โหลดโมเดล WangchanBERTa ----------
model = SentenceTransformer("airesearch/wangchanberta-base-att-spm-uncased")

# ---------- ฟังก์ชันตรวจแต่ละเงื่อนไข ----------
def call_tner(text):
    headers = {'Apikey': API_KEY}
    data = {'text': text}
    try:
        resp = requests.post(TNER_URL, headers=headers, data=data, timeout=10)
        if resp.status_code == 200:
            return resp.json()
    except Exception as e:
        print(f"TNER API error: {e}")
    return None

def check_summary_similarity(student_answer, reference_text, threshold=0.8):
    embeddings = model.encode([student_answer, reference_text])
    sim = cosine_similarity([embeddings[0]], [embeddings[1]])[0][0]
    return sim >= threshold

def check_examples(student_answer, example_phrases):
    violated = [phrase for phrase in example_phrases if phrase in student_answer]
    return len(violated) == 0, violated

def check_pronouns(student_answer, pronouns_list):
    words = word_tokenize(student_answer, engine='newmm')
    violated = [p for p in pronouns_list if p in words]
    return len(violated) == 0, violated

def check_abbreviations(student_answer):
    pattern = r'\b(?:[ก-ฮA-Za-z]\.){2,}'
    violated = []
    if re.search(pattern, student_answer):
        violated.append(re.search(pattern, student_answer).group())
    tner_result = call_tner(student_answer)
    if tner_result:
        for item in tner_result.get('entities', []):
            if item['type'] in ['ABB_DES', 'ABB_TTL', 'ABB_ORG', 'ABB_LOC', 'ABB']:
                violated.append(item['text'])
    return len(violated) == 0, violated

def check_summary_similarity(student_answer, reference_text, threshold=0.8):
    embeddings = model.encode([student_answer, reference_text])
    sim = cosine_similarity([embeddings[0]], [embeddings[1]])[0][0]
    violated = [] if sim >= threshold else ["ข้อความไม่สรุปใจความตรงกับบทความอ้างอิง"]
    return sim >= threshold, violated

def check_title(student_answer, forbidden_title="การใช้สื่อสังคมออนไลน์"):
    violated = [forbidden_title] if forbidden_title in student_answer else []
    return len(violated) == 0, violated

def validate_student_answer(student_answer):
    results = {}
    score = 1

    funcs = [
        ("summary_similarity", check_summary_similarity),
        ("no_example", check_examples),
        ("no_pronouns", check_pronouns),
        ("no_abbreviations", check_abbreviations),
        ("no_title", check_title)
    ]

    for name, func in funcs:
        if name == "summary_similarity":
            valid, violated = func(student_answer, reference_text)
        elif name == "no_example":
            valid, violated = func(student_answer, example_phrases)
        elif name == "no_pronouns":
            valid, violated = func(student_answer, pronouns_1_2)
        else:
            valid, violated = func(student_answer)

        # แปลง valid เป็น Python bool ปกติ
        results[name] = {"valid": bool(valid), "violated_words": violated}
        if not valid:
            score = 0

    return {
        "score": score,
        "details": results
    }


# ---------- ประเมินคำตอบนักเรียนคนเดียว ----------
def evaluate_single_student(student_answer):
    result = validate_student_answer(student_answer)
    return json.dumps(result, ensure_ascii=False, indent=2)


# ---------- ตัวอย่างเรียกใช้ ----------
student_answer = """สื่อสังคมหรือสื่อออนไลน์ เป็นช่องทางในการติดต่อ แพร่กระจายข่าวสารข้อมูลต่าง ๆ ให้ผู้คนได้รับรู้
แต่ข้อเสียของสื่อออนนไลน์คือหากใช้โดยไม่ระมัดระวัง เช่นการแสดงความคิดเห็นทําให้ผู้อื่นเสียหาย
การนําเสนอสิ่งที่มีเนื้อหาล่อแหลมชักจูงผู้คน หรือการกระทําผิดทางกฎหมาย ในปัจจุบันผู้คนส่วนใหญ่นิยมใช้สื่อออนไลน์
เป็นช่องทางในการค้าขาย เพราะเข้าถึงได้ง่ายและรวดเร็ว แต่ช่องการค้าขายก็มักจะมีมิจฉาชีพหลอกผู้คนอยู่เสมอ
แม้สังคมออนไลน์ หรือสื่อออนไลน์จะมีข้อดีมากแค่ไหน แต่ก็จะมีข้อเสียปะปน ดังนั้นควรใช้สื่อออนไลน์อย่างระมัดระวัง """

result_json = validate_student_answer(student_answer)
print(json.dumps(result_json, ensure_ascii=False, indent=2))

"""# ปรับปรุง (แยก)"""

import re
import requests
import json
import pandas as pd
from pythainlp.tokenize import word_tokenize
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# ---------- ตั้งค่า ----------
API_KEY = 'PYJ6lQwGuvr8w7OJVThpu3T0yUlrC3af'  # ใส่ API Key ของ AIForThai
TNER_URL = 'https://api.aiforthai.in.th/tner'

# ---------- โหลด Dataset ----------
examples_df = pd.read_csv('/content/drive/MyDrive/example_dialect.csv')   # dataset มีคอลัมน์ local_word
pronouns_df = pd.read_csv('/content/drive/MyDrive/personal_pronoun_dataset1.csv')   # dataset มีคอลัมน์ personal pronoun 1, personal pronoun 2

example_phrases = examples_df['local_word'].dropna().tolist()
pronouns_1 = pronouns_df['personal pronoun 1'].dropna().tolist()
pronouns_2 = pronouns_df['personal pronoun 2'].dropna().tolist()
pronouns_1_2 = pronouns_1 + pronouns_2

# ---------- บทความอ้างอิง ----------
reference_text = """สื่อสังคม (Social Media) หรือที่คนทั่วไปเรียกว่า สื่อออนไลน์ หรือ สื่อสังคม ออนไลน์ นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆ ได้อย่างรวดเร็วไปยังผู้คนที่อยู่ทั่วทุกมุมโลกที่สัญญาณโทรศัพท์เข้าถึง เช่น การนําเสนอข้อดีนานาประการของสินค้าชั้นนํา สินค้าพื้นเมืองให้เข้าถึงผู้ซื้อได้ทั่วโลก การนําเสนอข้อเท็จจริงของข่าวสารอย่างตรงไปตรงมา การเผยแพร่ งานเขียนคุณภาพบนโลกออนไลน์แทนการเข้าสํานักพิมพ์ เป็นต้น จึงกล่าวได้ว่า เราสามารถใช้สื่อสังคมออนไลน์ค้นหาและรับข้อมูลข่าวสารที่มีประโยชน์ได้เป็นอย่างดี
        อย่างไรก็ตาม หากใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวัง หรือขาดความรับผืดชอบต่อสังคมส่วนรวม ไม่ว่าจะเป็นการเขียนแสดงความคิดเห็นวิพากษ์วิจารณ์ผู้อื่นในทางเสียหาย การนำเสนอผลงานที่มีเนื้อหาล่อแหลมหรือชักจูงผู้รับสารไปในทางไม่เหมาะสม หรือการสร้างกลุ่มเฉพาะที่ขัดต่อศีลธรรมอันดีของสังคมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฎหมายทั้งการพนัน การขายของผิดกฎหมาย เป็นต้น การใช้สื่อสังคมออนไลน์ในลักษณะดังกล่าวจึงเป็นการใช้ที่เป็นโทษแก่สังคม
        ปัจจุบันผู้คนจํานวนไม่น้อยนิยมใช้สื่อสังคมออนไลน์เป็นช่องทางในการทํา การตลาดทั้งในทางธุรกิจ สังคม และการเมือง จนได้ผลดีแบบก้าวกระโดด ทั้งนี้ เพราะสามารถเข้าถึงกลุ่มคนทุกเพศ ทุกวัย และทุกสาขาอาชีพโดยไม่มีข้อจํากัดเรื่อง เวลาและสถานที่ กลุ่มต่างๆ ดังกล่าวจึงหันมาใช้สื่อสังคมออนไลน์เพื่อสร้างกระแสให้ เกิดความนิยมชมชอบในกิจการของตน ด้วยการโฆษณาชวนเชื่อทุกรูปแบบจนลูกค้า เกิดความหลงใหลข้อมูลข่าวสาร จนตกเป็นเหยื่ออย่างไม่รู้ตัว เราจึงควรแก้ปัญหา การตกเป็นเหยื่อทางการตลาดของกลุ่มมิจฉาชีพด้วยการเร่งสร้างภูมิคุ้มกันรู้ทันสื่อไม่ตกเป็นเหยื่อทางการตลาดโดยเร็ว
        แม้ว่าจะมีการใช้สื่อสังคมออนไลน์ในทางสร้างสรรค์สิ่งที่ดีให้แก่สังคม ตัวอย่างเช่น การเตือนภัยให้แก่คนในสังคมได้อย่างรวดเร็ว การส่งต่อข้อมูลข่าวสาร เพื่อระดมความช่วยเหลือให้แก่ผู้ที่กําลังเดือดร้อน เป็นต้น แต่หลายครั้งคนในสังคมก็ อาจรู้สึกไม่มั่นใจเมื่อพบว่าตนเองถูกหลอกลวงจากคนบางกลุ่มที่ใช้สื่อสังคมออนไลน์ เป็นพื้นที่แสวงหาผลประโยชน์ส่วนตัว จนทําให้เกิดความเข้าใจผิดและสร้างความ เสื่อมเสียให้แก่ผู้อื่น ดังนั้นการใช้สื่อสังคมออนไลน์ด้วยเจตนาแอบแฝงจึงมีผลกระทบต่อความน่าเชื่อถือของข้อมูลข่าวสารโดยตรง"""

# ---------- โหลดโมเดล + cache reference ----------
model = SentenceTransformer("airesearch/wangchanberta-base-att-spm-uncased")
reference_vec = model.encode(reference_text)

# ---------- ตัวช่วย ----------
def normalize_text(text: str) -> str:
    """ทำความสะอาดข้อความให้เรียบร้อย"""
    text = re.sub(r'\s+', ' ', text.strip())  # ตัดช่องว่างเกิน
    return text

#เรียก API
def call_tner(text):
    headers = {'Apikey': API_KEY}
    data = {'text': text}
    try:
        resp = requests.post(TNER_URL, headers=headers, data=data, timeout=10)
        if resp.status_code == 200:
            return resp.json()
    except Exception as e:
        print(f"TNER API error: {e}")
    return None

# ---------- ฟังก์ชันตรวจแต่ละเงื่อนไข ----------
#ไม่ย่อความผิดไปจากตัวบทอ่าน
def check_summary_similarity(student_answer, threshold=0.6):
    vec = model.encode(student_answer)
    sim = cosine_similarity([vec], [reference_vec])[0][0]
    violated = [] if sim >= threshold else ["ข้อความไม่สรุปใจความตรงกับบทความอ้างอิง"]
    return sim >= threshold, violated, sim

#ไม่ยกตัวอย่าง
def check_examples(student_answer, example_phrases):
    violated = [phrase for phrase in example_phrases if phrase in student_answer]
    return len(violated) == 0, violated

#ไม่ใช้เครื่องหมายอัญประกาศกํากับ
def check_no_quotes(student_answer):
    # เครื่องหมายอัญประกาศที่มักพบ
    quote_chars = ['"', '“', '”', "'", '‘', '’', '«', '»']
    violated = [q for q in quote_chars if q in student_answer]
    return len(violated) == 0, violated

#ไม่ใช้คําสรรพนามบุรุษที่ 1 หรือ 2
def check_pronouns(student_answer, pronouns_list):
    words = word_tokenize(student_answer, engine='newmm')
    violated = [p for p in pronouns_list if p in words]
    return len(violated) == 0, violated

#ไม่ใช้อักษรย่อหรือคําย่อ
def check_abbreviations(student_answer):
    pattern = r'(?:[ก-ฮA-Za-z]\.){2,}'
    violated = []

    m = re.search(pattern, student_answer)
    if m:
        violated.append(m.group())

    tner_result = call_tner(student_answer)
    if tner_result:
        for item in tner_result.get('entities', []):
            if item['type'] in ['ABB_DES', 'ABB_TTL', 'ABB_ORG', 'ABB_LOC', 'ABB']:
                violated.append(item['text'])

    return len(violated) == 0, list(set(violated))  # เอาซ้ำออก

#ไม่เขียนชื่อเรื่อง
def check_title(student_answer, forbidden_title="การใช้สื่อสังคมออนไลน์", relaxed=True):
    """
    relaxed=True  → ถ้าเจอชื่อเรื่องที่ต้นประโยค จะไม่หักคะแนน แต่ถ้าเจอที่อื่นจะบันทึกและตัดคะแนน
    relaxed=False → ถ้าเจอชื่อเรื่องที่ไหนก็ตาม ถือว่าผิด (ตัดคะแนน)
    """
    violated = []
    if forbidden_title in student_answer:
        violated.append(forbidden_title)

    if not violated:
        return True, violated  # ไม่เจอเลย → ผ่าน

    if relaxed:
        # ตัดช่องว่าง/เว้นวรรค แล้วเช็กว่าขึ้นต้นด้วยชื่อเรื่องหรือไม่
        if student_answer.strip().startswith(forbidden_title):
            # ถ้าอยู่ต้นประโยค → ผ่าน (ไม่ตัดคะแนน แต่เตือน)
            return True, violated
        else:
            # ถ้าอยู่ตำแหน่งอื่น → ถือว่าผิด
            return False, violated
    else:
        # โหมด strict → ผิดทุกกรณีถ้าเจอ
        return False, violated

# ---------- ฟังก์ชันหลัก ----------
def validate_student_answer(student_answer):
    student_answer = normalize_text(student_answer)

    results = {}
    score = 1  # เริ่มต้น = ผ่าน
    sim_value = None  # เก็บ similarity

    funcs = [
        ("summary_similarity", lambda ans: check_summary_similarity(ans)),
        ("no_example", lambda ans: check_examples(ans, example_phrases)),
        ("no_quotes", lambda ans: check_no_quotes(ans)),
        ("no_pronouns", lambda ans: check_pronouns(ans, pronouns_1_2)),
        ("no_abbreviations", lambda ans: check_abbreviations(ans)),
        ("no_title", lambda ans: check_title(ans))
    ]

    for name, func in funcs:
        if name == "summary_similarity":
            valid, violated, sim = func(student_answer)
            sim_value = float(sim) # Convert numpy float32 to Python float
        else:
            valid, violated = func(student_answer)

        results[name] = {
            "valid": bool(valid),
            "violated_words": violated
        }

        if name == "summary_similarity":
            results[name]["similarity"] = sim_value  # เก็บค่า sim

        if not valid:
            score = 0  # ถ้าผิดข้อเดียว ถือว่าไม่ผ่าน

    return {
        "score": score,
        "details": results
    }

# ---------- ประเมินคำตอบนักเรียน ----------
def evaluate_single_student(student_answer):
    result = validate_student_answer(student_answer)
    return json.dumps(result, ensure_ascii=False, indent=2)


# ---------- ตัวอย่างเรียกใช้ ----------
if __name__ == "__main__":
    student_answer = """การใช้สื่อสังคมออนไลน์ สื่อสังคม(Social Media) หรือคนที่คนทั่วไป เรียกว่า
สื่อออนไลน์นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆอย่างไร
ก็ตามหากใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวัง หรือขาดความรับผิดชอบต่อสังคม
ส่วนรวมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฏหมายจนตกเป็นเหยื่ออย่างไม่รู้ตัว
คนในสังคมก็อาจรู้สึกไม่มั่นใจเมื่อพบว่าตนเองถูก หลอกลวงจนทำให้เกิดความเข้าใจผิด"""

    print(evaluate_single_student(student_answer))

"""# รวม ได้ 82/100

https://silpakorn-my.sharepoint.com/:x:/g/personal/singtong_c2_su_ac_th/ETJkDdRjoZRJtpxYpufLlPABkvGtcIBe7VGhELrIY_VwYw?e=f0pZLQ
"""

import re
import requests
import json
import pandas as pd
from pythainlp.tokenize import word_tokenize
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# ---------- ตั้งค่า ----------
API_KEY = 'PYJ6lQwGuvr8w7OJVThpu3T0yUlrC3af'
TNER_URL = 'https://api.aiforthai.in.th/tner'

# ---------- โหลด Dataset ----------
examples_df = pd.read_csv('/content/drive/MyDrive/example_dialect.csv')
pronouns_df = pd.read_csv('/content/drive/MyDrive/personal_pronoun.csv')

example_phrases = examples_df['local_word'].dropna().tolist()
pronouns_1 = pronouns_df['personal pronoun 1'].dropna().tolist()
pronouns_2 = pronouns_df['personal pronoun 2'].dropna().tolist()
pronouns_1_2 = pronouns_1 + pronouns_2

# ---------- บทความอ้างอิง ----------
reference_text = """สื่อสังคม (Social Media) หรือที่คนทั่วไปเรียกว่า สื่อออนไลน์ หรือ สื่อสังคม ออนไลน์ นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆ ได้อย่างรวดเร็วไปยังผู้คนที่อยู่ทั่วทุกมุมโลกที่สัญญาณโทรศัพท์เข้าถึง เช่น การนําเสนอข้อดีนานาประการของสินค้าชั้นนํา สินค้าพื้นเมืองให้เข้าถึงผู้ซื้อได้ทั่วโลก การนําเสนอข้อเท็จจริงของข่าวสารอย่างตรงไปตรงมา การเผยแพร่ งานเขียนคุณภาพบนโลกออนไลน์แทนการเข้าสํานักพิมพ์ เป็นต้น จึงกล่าวได้ว่า เราสามารถใช้สื่อสังคมออนไลน์ค้นหาและรับข้อมูลข่าวสารที่มีประโยชน์ได้เป็นอย่างดี
        อย่างไรก็ตาม หากใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวัง หรือขาดความรับผืดชอบต่อสังคมส่วนรวม ไม่ว่าจะเป็นการเขียนแสดงความคิดเห็นวิพากษ์วิจารณ์ผู้อื่นในทางเสียหาย การนำเสนอผลงานที่มีเนื้อหาล่อแหลมหรือชักจูงผู้รับสารไปในทางไม่เหมาะสม หรือการสร้างกลุ่มเฉพาะที่ขัดต่อศีลธรรมอันดีของสังคมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฎหมายทั้งการพนัน การขายของผิดกฎหมาย เป็นต้น การใช้สื่อสังคมออนไลน์ในลักษณะดังกล่าวจึงเป็นการใช้ที่เป็นโทษแก่สังคม
        ปัจจุบันผู้คนจํานวนไม่น้อยนิยมใช้สื่อสังคมออนไลน์เป็นช่องทางในการทํา การตลาดทั้งในทางธุรกิจ สังคม และการเมือง จนได้ผลดีแบบก้าวกระโดด ทั้งนี้ เพราะสามารถเข้าถึงกลุ่มคนทุกเพศ ทุกวัย และทุกสาขาอาชีพโดยไม่มีข้อจํากัดเรื่อง เวลาและสถานที่ กลุ่มต่างๆ ดังกล่าวจึงหันมาใช้สื่อสังคมออนไลน์เพื่อสร้างกระแสให้ เกิดความนิยมชมชอบในกิจการของตน ด้วยการโฆษณาชวนเชื่อทุกรูปแบบจนลูกค้า เกิดความหลงใหลข้อมูลข่าวสาร จนตกเป็นเหยื่ออย่างไม่รู้ตัว เราจึงควรแก้ปัญหา การตกเป็นเหยื่อทางการตลาดของกลุ่มมิจฉาชีพด้วยการเร่งสร้างภูมิคุ้มกันรู้ทันสื่อไม่ตกเป็นเหยื่อทางการตลาดโดยเร็ว
        แม้ว่าจะมีการใช้สื่อสังคมออนไลน์ในทางสร้างสรรค์สิ่งที่ดีให้แก่สังคม ตัวอย่างเช่น การเตือนภัยให้แก่คนในสังคมได้อย่างรวดเร็ว การส่งต่อข้อมูลข่าวสาร เพื่อระดมความช่วยเหลือให้แก่ผู้ที่กําลังเดือดร้อน เป็นต้น แต่หลายครั้งคนในสังคมก็ อาจรู้สึกไม่มั่นใจเมื่อพบว่าตนเองถูกหลอกลวงจากคนบางกลุ่มที่ใช้สื่อสังคมออนไลน์ เป็นพื้นที่แสวงหาผลประโยชน์ส่วนตัว จนทําให้เกิดความเข้าใจผิดและสร้างความ เสื่อมเสียให้แก่ผู้อื่น ดังนั้นการใช้สื่อสังคมออนไลน์ด้วยเจตนาแอบแฝงจึงมีผลกระทบต่อความน่าเชื่อถือของข้อมูลข่าวสารโดยตรง"""
  # ตัดทอนเพื่อความสั้น
model = SentenceTransformer("airesearch/wangchanberta-base-att-spm-uncased")
reference_vec = model.encode(reference_text)

# ---------- ตัวช่วย ----------
def normalize_text(text: str) -> str:
    return re.sub(r'\s+', ' ', str(text).strip())

def call_tner(text):
    headers = {'Apikey': API_KEY}
    data = {'text': text}
    try:
        resp = requests.post(TNER_URL, headers=headers, data=data, timeout=10)
        if resp.status_code == 200:
            return resp.json()
    except Exception as e:
        print(f"TNER API error: {e}")
    return None

# ---------- ฟังก์ชันตรวจ ----------
def check_summary_similarity(student_answer, threshold=0.6):
    vec = model.encode(student_answer)
    sim = cosine_similarity([vec], [reference_vec])[0][0]
    violated = [] if sim >= threshold else ["ข้อความไม่สรุปใจความตรงกับบทความอ้างอิง"]
    return sim >= threshold, violated, float(sim)

def check_examples(student_answer, example_phrases):
    violated = [phrase for phrase in example_phrases if phrase in student_answer]
    return len(violated) == 0, violated

def check_no_quotes(student_answer):
    quote_chars = ['"', '“', '”', "'", '‘', '’', '«', '»']
    violated = [q for q in quote_chars if q in student_answer]
    return len(violated) == 0, violated

def check_pronouns(student_answer, pronouns_list):
    words = word_tokenize(student_answer, engine='newmm')
    violated = [p for p in pronouns_list if p in words]
    return len(violated) == 0, violated

def check_abbreviations(student_answer):
    pattern = r'(?:[ก-ฮA-Za-z]\.){2,}'
    violated = []
    m = re.search(pattern, student_answer)
    if m:
        violated.append(m.group())
    tner_result = call_tner(student_answer)
    if tner_result:
        for item in tner_result.get('entities', []):
            if item['type'] in ['ABB_DES', 'ABB_TTL', 'ABB_ORG', 'ABB_LOC', 'ABB']:
                violated.append(item['text'])
    return len(violated) == 0, list(set(violated))

def check_title(student_answer, forbidden_title="การใช้สื่อสังคมออนไลน์"):
    violated = [forbidden_title] if forbidden_title in student_answer else []
    return len(violated) == 0, violated

# ---------- ฟังก์ชันหลัก ----------
def validate_student_answer(student_answer):
    student_answer = normalize_text(student_answer)
    results, score, sim_value = {}, 1, None

    funcs = [
        ("summary_similarity", lambda ans: check_summary_similarity(ans)),
        ("no_example", lambda ans: check_examples(ans, example_phrases)),
        ("no_quotes", lambda ans: check_no_quotes(ans)),
        ("no_pronouns", lambda ans: check_pronouns(ans, pronouns_1_2)),
        ("no_abbreviations", lambda ans: check_abbreviations(ans)),
        ("no_title", lambda ans: check_title(ans))
    ]

    for name, func in funcs:
        if name == "summary_similarity":
            valid, violated, sim = func(student_answer)
            sim_value = sim
        else:
            valid, violated = func(student_answer)

        results[name] = {"valid": bool(valid), "violated_words": violated}
        if name == "summary_similarity":
            results[name]["similarity"] = sim_value

        if not valid:
            score = 0

    return {"score": score, "details": results}

# ---------- ประเมินทั้ง DataFrame ----------
def evaluate_students(df):
    all_results = []
    for idx, row in df.iterrows():
        ans = row.get("student_answer_1", "")
        result = validate_student_answer(ans)

        row_result = row.to_dict()
        row_result.update({
            "score": result["score"],
            "similarity": result["details"]["summary_similarity"].get("similarity", None),
            "violations": json.dumps(result["details"], ensure_ascii=False)
        })
        all_results.append(row_result)

    return pd.DataFrame(all_results)

# ---------- ตัวอย่างเรียกใช้ ----------
if __name__ == "__main__":
    input_csv = "/content/drive/MyDrive/S3(Sheet1).csv"
    output_csv = "/content/sample_data/S3_results.csv"   # ไฟล์ผลลัพธ์ที่ต้องการบันทึก

    df = pd.read_csv(input_csv)
    results_df = evaluate_students(df)

    # บันทึกเป็น CSV
    results_df.to_csv(output_csv, index=False, encoding="utf-8-sig")

    print("✅ ประเมินเสร็จสิ้น บันทึกไฟล์แล้วที่:", output_csv)
    print(results_df.head())

"""# ปรับการตรวจชื่อเรื่อง ได้ 85/100 (ไม่เอา "เรา")

https://silpakorn-my.sharepoint.com/:x:/g/personal/singtong_c2_su_ac_th/EUQBQ1cXKY5DrW8GlqLrBJMBXjHV1muwCNwJ4hbrM73YUQ?e=gAi6ma
"""

import re
import requests
import json
import pandas as pd
from pythainlp.tokenize import word_tokenize
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# ---------- ตั้งค่า ----------
API_KEY = 'PYJ6lQwGuvr8w7OJVThpu3T0yUlrC3af'
TNER_URL = 'https://api.aiforthai.in.th/tner'

# ---------- โหลด Dataset ----------
examples_df = pd.read_csv('/content/drive/MyDrive/example_dialect.csv')
pronouns_df = pd.read_csv('/content/drive/MyDrive/personal_pronoun_dataset1.csv')

example_phrases = examples_df['local_word'].dropna().tolist()
pronouns_1 = pronouns_df['personal pronoun 1'].dropna().tolist()
pronouns_2 = pronouns_df['personal pronoun 2'].dropna().tolist()
pronouns_1_2 = pronouns_1 + pronouns_2

# ---------- บทความอ้างอิง ----------
reference_text = """สื่อสังคม (Social Media) หรือที่คนทั่วไปเรียกว่า สื่อออนไลน์ หรือ สื่อสังคม ออนไลน์ นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆ ได้อย่างรวดเร็วไปยังผู้คนที่อยู่ทั่วทุกมุมโลกที่สัญญาณโทรศัพท์เข้าถึง เช่น การนําเสนอข้อดีนานาประการของสินค้าชั้นนํา สินค้าพื้นเมืองให้เข้าถึงผู้ซื้อได้ทั่วโลก การนําเสนอข้อเท็จจริงของข่าวสารอย่างตรงไปตรงมา การเผยแพร่ งานเขียนคุณภาพบนโลกออนไลน์แทนการเข้าสํานักพิมพ์ เป็นต้น จึงกล่าวได้ว่า เราสามารถใช้สื่อสังคมออนไลน์ค้นหาและรับข้อมูลข่าวสารที่มีประโยชน์ได้เป็นอย่างดี
        อย่างไรก็ตาม หากใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวัง หรือขาดความรับผืดชอบต่อสังคมส่วนรวม ไม่ว่าจะเป็นการเขียนแสดงความคิดเห็นวิพากษ์วิจารณ์ผู้อื่นในทางเสียหาย การนำเสนอผลงานที่มีเนื้อหาล่อแหลมหรือชักจูงผู้รับสารไปในทางไม่เหมาะสม หรือการสร้างกลุ่มเฉพาะที่ขัดต่อศีลธรรมอันดีของสังคมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฎหมายทั้งการพนัน การขายของผิดกฎหมาย เป็นต้น การใช้สื่อสังคมออนไลน์ในลักษณะดังกล่าวจึงเป็นการใช้ที่เป็นโทษแก่สังคม
        ปัจจุบันผู้คนจํานวนไม่น้อยนิยมใช้สื่อสังคมออนไลน์เป็นช่องทางในการทํา การตลาดทั้งในทางธุรกิจ สังคม และการเมือง จนได้ผลดีแบบก้าวกระโดด ทั้งนี้ เพราะสามารถเข้าถึงกลุ่มคนทุกเพศ ทุกวัย และทุกสาขาอาชีพโดยไม่มีข้อจํากัดเรื่อง เวลาและสถานที่ กลุ่มต่างๆ ดังกล่าวจึงหันมาใช้สื่อสังคมออนไลน์เพื่อสร้างกระแสให้ เกิดความนิยมชมชอบในกิจการของตน ด้วยการโฆษณาชวนเชื่อทุกรูปแบบจนลูกค้า เกิดความหลงใหลข้อมูลข่าวสาร จนตกเป็นเหยื่ออย่างไม่รู้ตัว เราจึงควรแก้ปัญหา การตกเป็นเหยื่อทางการตลาดของกลุ่มมิจฉาชีพด้วยการเร่งสร้างภูมิคุ้มกันรู้ทันสื่อไม่ตกเป็นเหยื่อทางการตลาดโดยเร็ว
        แม้ว่าจะมีการใช้สื่อสังคมออนไลน์ในทางสร้างสรรค์สิ่งที่ดีให้แก่สังคม ตัวอย่างเช่น การเตือนภัยให้แก่คนในสังคมได้อย่างรวดเร็ว การส่งต่อข้อมูลข่าวสาร เพื่อระดมความช่วยเหลือให้แก่ผู้ที่กําลังเดือดร้อน เป็นต้น แต่หลายครั้งคนในสังคมก็ อาจรู้สึกไม่มั่นใจเมื่อพบว่าตนเองถูกหลอกลวงจากคนบางกลุ่มที่ใช้สื่อสังคมออนไลน์ เป็นพื้นที่แสวงหาผลประโยชน์ส่วนตัว จนทําให้เกิดความเข้าใจผิดและสร้างความ เสื่อมเสียให้แก่ผู้อื่น ดังนั้นการใช้สื่อสังคมออนไลน์ด้วยเจตนาแอบแฝงจึงมีผลกระทบต่อความน่าเชื่อถือของข้อมูลข่าวสารโดยตรง"""
  # ตัดทอนเพื่อความสั้น
model = SentenceTransformer("airesearch/wangchanberta-base-att-spm-uncased")
reference_vec = model.encode(reference_text)

# ---------- ตัวช่วย ----------
def normalize_text(text: str) -> str:
    return re.sub(r'\s+', ' ', str(text).strip())

def call_tner(text):
    headers = {'Apikey': API_KEY}
    data = {'text': text}
    try:
        resp = requests.post(TNER_URL, headers=headers, data=data, timeout=10)
        if resp.status_code == 200:
            return resp.json()
    except Exception as e:
        print(f"TNER API error: {e}")
    return None

# ---------- ฟังก์ชันตรวจ ----------
def check_summary_similarity(student_answer, threshold=0.6):
    vec = model.encode(student_answer)
    sim = cosine_similarity([vec], [reference_vec])[0][0]
    violated = [] if sim >= threshold else ["ข้อความไม่สรุปใจความตรงกับบทความอ้างอิง"]
    return sim >= threshold, violated, float(sim)

def check_examples(student_answer, example_phrases):
    violated = [phrase for phrase in example_phrases if phrase in student_answer]
    return len(violated) == 0, violated

def check_no_quotes(student_answer):
    quote_chars = ['"', '“', '”', "'", '‘', '’', '«', '»']
    violated = [q for q in quote_chars if q in student_answer]
    return len(violated) == 0, violated

def check_pronouns(student_answer, pronouns_list):
    words = word_tokenize(student_answer, engine='newmm')
    violated = [p for p in pronouns_list if p in words]
    return len(violated) == 0, violated

def check_abbreviations(student_answer):
    pattern = r'(?:[ก-ฮA-Za-z]\.){2,}'
    violated = []
    m = re.search(pattern, student_answer)
    if m:
        violated.append(m.group())
    tner_result = call_tner(student_answer)
    if tner_result:
        for item in tner_result.get('entities', []):
            if item['type'] in ['ABB_DES', 'ABB_TTL', 'ABB_ORG', 'ABB_LOC', 'ABB']:
                violated.append(item['text'])
    return len(violated) == 0, list(set(violated))

def check_title(student_answer, forbidden_title="การใช้สื่อสังคมออนไลน์", relaxed=True):
    """
    relaxed=True  → ถ้าเจอชื่อเรื่อง จะไม่ตัดคะแนน แต่จะบันทึกเตือน
    relaxed=False → ถ้าเจอชื่อเรื่อง จะถือว่าผิด (ตัดคะแนน)
    """
    violated = [forbidden_title] if forbidden_title in student_answer else []

    if relaxed:
        # ผ่าน แต่บันทึกว่าเจอชื่อเรื่อง
        return True, violated
    else:
        # ถ้าเจอถือว่าผิดตาม rubric เข้มงวด
        return len(violated) == 0, violated

# ---------- ฟังก์ชันหลัก ----------
def validate_student_answer(student_answer):
    student_answer = normalize_text(student_answer)
    results, score, sim_value = {}, 1, None

    funcs = [
        ("summary_similarity", lambda ans: check_summary_similarity(ans)),
        ("no_example", lambda ans: check_examples(ans, example_phrases)),
        ("no_quotes", lambda ans: check_no_quotes(ans)),
        ("no_pronouns", lambda ans: check_pronouns(ans, pronouns_1_2)),
        ("no_abbreviations", lambda ans: check_abbreviations(ans)),
        ("no_title", lambda ans: check_title(ans))
    ]

    for name, func in funcs:
        if name == "summary_similarity":
            valid, violated, sim = func(student_answer)
            sim_value = sim
        else:
            valid, violated = func(student_answer)

        results[name] = {"valid": bool(valid), "violated_words": violated}
        if name == "summary_similarity":
            results[name]["similarity"] = sim_value

        if not valid:
            score = 0

    return {"score": score, "details": results}

# ---------- ประเมินทั้ง DataFrame ----------
def evaluate_students(df):
    all_results = []
    for idx, row in df.iterrows():
        ans = row.get("student_answer_1", "")
        result = validate_student_answer(ans)

        row_result = row.to_dict()
        row_result.update({
            "score": result["score"],
            "similarity": result["details"]["summary_similarity"].get("similarity", None),
            "violations": json.dumps(result["details"], ensure_ascii=False)
        })
        all_results.append(row_result)

    return pd.DataFrame(all_results)

# ---------- ตัวอย่างเรียกใช้ ----------
if __name__ == "__main__":
    input_csv = "/content/drive/MyDrive/S3(Sheet1).csv"
    output_csv = "/content/sample_data/S3_results1.csv"   # ไฟล์ผลลัพธ์ที่ต้องการบันทึก

    df = pd.read_csv(input_csv)
    results_df = evaluate_students(df)

    # บันทึกเป็น CSV
    results_df.to_csv(output_csv, index=False, encoding="utf-8-sig")

    print("✅ ประเมินเสร็จสิ้น บันทึกไฟล์แล้วที่:", output_csv)
    print(results_df.head())

"""# ลองชื่อเรื่องต้นประโยคไม่หักคะแนน(ไม่เอา "เรา") ได้ 87/100

https://silpakorn-my.sharepoint.com/:x:/g/personal/singtong_c2_su_ac_th/EQcD8eiAhRpNvO20d8yBSjgBacMinUPeY4GiJiYK6kio8g?e=a6f0ES
"""

import re
import requests
import json
import pandas as pd
from pythainlp.tokenize import word_tokenize
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# ---------- ตั้งค่า ----------
API_KEY = 'PYJ6lQwGuvr8w7OJVThpu3T0yUlrC3af'
TNER_URL = 'https://api.aiforthai.in.th/tner'

# ---------- โหลด Dataset ----------
examples_df = pd.read_csv('/content/drive/MyDrive/example_dialect.csv')
pronouns_df = pd.read_csv('/content/drive/MyDrive/personal_pronoun_dataset1.csv')

example_phrases = examples_df['local_word'].dropna().tolist()
pronouns_1 = pronouns_df['personal pronoun 1'].dropna().tolist()
pronouns_2 = pronouns_df['personal pronoun 2'].dropna().tolist()
pronouns_1_2 = pronouns_1 + pronouns_2

# ---------- บทความอ้างอิง ----------
reference_text = """สื่อสังคม (Social Media) หรือที่คนทั่วไปเรียกว่า สื่อออนไลน์ หรือ สื่อสังคม ออนไลน์ นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆ ได้อย่างรวดเร็วไปยังผู้คนที่อยู่ทั่วทุกมุมโลกที่สัญญาณโทรศัพท์เข้าถึง เช่น การนําเสนอข้อดีนานาประการของสินค้าชั้นนํา สินค้าพื้นเมืองให้เข้าถึงผู้ซื้อได้ทั่วโลก การนําเสนอข้อเท็จจริงของข่าวสารอย่างตรงไปตรงมา การเผยแพร่ งานเขียนคุณภาพบนโลกออนไลน์แทนการเข้าสํานักพิมพ์ เป็นต้น จึงกล่าวได้ว่า เราสามารถใช้สื่อสังคมออนไลน์ค้นหาและรับข้อมูลข่าวสารที่มีประโยชน์ได้เป็นอย่างดี
        อย่างไรก็ตาม หากใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวัง หรือขาดความรับผืดชอบต่อสังคมส่วนรวม ไม่ว่าจะเป็นการเขียนแสดงความคิดเห็นวิพากษ์วิจารณ์ผู้อื่นในทางเสียหาย การนำเสนอผลงานที่มีเนื้อหาล่อแหลมหรือชักจูงผู้รับสารไปในทางไม่เหมาะสม หรือการสร้างกลุ่มเฉพาะที่ขัดต่อศีลธรรมอันดีของสังคมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฎหมายทั้งการพนัน การขายของผิดกฎหมาย เป็นต้น การใช้สื่อสังคมออนไลน์ในลักษณะดังกล่าวจึงเป็นการใช้ที่เป็นโทษแก่สังคม
        ปัจจุบันผู้คนจํานวนไม่น้อยนิยมใช้สื่อสังคมออนไลน์เป็นช่องทางในการทํา การตลาดทั้งในทางธุรกิจ สังคม และการเมือง จนได้ผลดีแบบก้าวกระโดด ทั้งนี้ เพราะสามารถเข้าถึงกลุ่มคนทุกเพศ ทุกวัย และทุกสาขาอาชีพโดยไม่มีข้อจํากัดเรื่อง เวลาและสถานที่ กลุ่มต่างๆ ดังกล่าวจึงหันมาใช้สื่อสังคมออนไลน์เพื่อสร้างกระแสให้ เกิดความนิยมชมชอบในกิจการของตน ด้วยการโฆษณาชวนเชื่อทุกรูปแบบจนลูกค้า เกิดความหลงใหลข้อมูลข่าวสาร จนตกเป็นเหยื่ออย่างไม่รู้ตัว เราจึงควรแก้ปัญหา การตกเป็นเหยื่อทางการตลาดของกลุ่มมิจฉาชีพด้วยการเร่งสร้างภูมิคุ้มกันรู้ทันสื่อไม่ตกเป็นเหยื่อทางการตลาดโดยเร็ว
        แม้ว่าจะมีการใช้สื่อสังคมออนไลน์ในทางสร้างสรรค์สิ่งที่ดีให้แก่สังคม ตัวอย่างเช่น การเตือนภัยให้แก่คนในสังคมได้อย่างรวดเร็ว การส่งต่อข้อมูลข่าวสาร เพื่อระดมความช่วยเหลือให้แก่ผู้ที่กําลังเดือดร้อน เป็นต้น แต่หลายครั้งคนในสังคมก็ อาจรู้สึกไม่มั่นใจเมื่อพบว่าตนเองถูกหลอกลวงจากคนบางกลุ่มที่ใช้สื่อสังคมออนไลน์ เป็นพื้นที่แสวงหาผลประโยชน์ส่วนตัว จนทําให้เกิดความเข้าใจผิดและสร้างความ เสื่อมเสียให้แก่ผู้อื่น ดังนั้นการใช้สื่อสังคมออนไลน์ด้วยเจตนาแอบแฝงจึงมีผลกระทบต่อความน่าเชื่อถือของข้อมูลข่าวสารโดยตรง"""
  # ตัดทอนเพื่อความสั้น
model = SentenceTransformer("airesearch/wangchanberta-base-att-spm-uncased")
reference_vec = model.encode(reference_text)

# ---------- ตัวช่วย ----------
def normalize_text(text: str) -> str:
    return re.sub(r'\s+', ' ', str(text).strip())

def call_tner(text):
    headers = {'Apikey': API_KEY}
    data = {'text': text}
    try:
        resp = requests.post(TNER_URL, headers=headers, data=data, timeout=10)
        if resp.status_code == 200:
            return resp.json()
    except Exception as e:
        print(f"TNER API error: {e}")
    return None

# ---------- ฟังก์ชันตรวจ ----------
#ไม่ย่อความผิดไปจากตัวบทอ่าน
def check_summary_similarity(student_answer, threshold=0.6):
    vec = model.encode(student_answer)
    sim = cosine_similarity([vec], [reference_vec])[0][0]
    violated = [] if sim >= threshold else ["ข้อความไม่สรุปใจความตรงกับบทความอ้างอิง"]
    return sim >= threshold, violated, float(sim)

#ไม่ยกตัวอย่าง
def check_examples(student_answer, example_phrases):
    violated = [phrase for phrase in example_phrases if phrase in student_answer]
    return len(violated) == 0, violated

#ไม่ใช้เครื่องหมายอัญประกาศกํากับ
def check_no_quotes(student_answer):
    quote_chars = ['"', '“', '”', "'", '‘', '’', '«', '»']
    violated = [q for q in quote_chars if q in student_answer]
    return len(violated) == 0, violated

#ไม่ใช้คําสรรพนามบุรุษที่ 1 หรือ 2
def check_pronouns(student_answer, pronouns_list):
    words = word_tokenize(student_answer, engine='newmm')
    violated = [p for p in pronouns_list if p in words]
    return len(violated) == 0, violated

#ไม่ใช้อักษรย่อหรือคําย่อ
def check_abbreviations(student_answer):
    pattern = r'(?:[ก-ฮA-Za-z]\.){2,}'
    violated = []
    m = re.search(pattern, student_answer)
    if m:
        violated.append(m.group())
    tner_result = call_tner(student_answer)
    if tner_result:
        for item in tner_result.get('entities', []):
            if item['type'] in ['ABB_DES', 'ABB_TTL', 'ABB_ORG', 'ABB_LOC', 'ABB']:
                violated.append(item['text'])
    return len(violated) == 0, list(set(violated))

#ไม่เขียนชื่อเรื่อง
def check_title(student_answer, forbidden_title="การใช้สื่อสังคมออนไลน์", relaxed=True):
    """
    relaxed=True  → ถ้าเจอชื่อเรื่องที่ต้นประโยค จะไม่หักคะแนน แต่ถ้าเจอที่อื่นจะบันทึกและตัดคะแนน
    relaxed=False → ถ้าเจอชื่อเรื่องที่ไหนก็ตาม ถือว่าผิด (ตัดคะแนน)
    """
    violated = []
    if forbidden_title in student_answer:
        violated.append(forbidden_title)

    if not violated:
        return True, violated  # ไม่เจอเลย → ผ่าน

    if relaxed:
        # ตัดช่องว่าง/เว้นวรรค แล้วเช็กว่าขึ้นต้นด้วยชื่อเรื่องหรือไม่
        if student_answer.strip().startswith(forbidden_title):
            # ถ้าอยู่ต้นประโยค → ผ่าน (ไม่ตัดคะแนน แต่เตือน)
            return True, violated
        else:
            # ถ้าอยู่ตำแหน่งอื่น → ถือว่าผิด
            return False, violated
    else:
        # โหมด strict → ผิดทุกกรณีถ้าเจอ
        return False, violated

# ---------- ฟังก์ชันหลัก ----------
def validate_student_answer(student_answer):
    student_answer = normalize_text(student_answer)
    results, score, sim_value = {}, 1, None

    funcs = [
        ("summary_similarity", lambda ans: check_summary_similarity(ans)),
        ("no_example", lambda ans: check_examples(ans, example_phrases)),
        ("no_quotes", lambda ans: check_no_quotes(ans)),
        ("no_pronouns", lambda ans: check_pronouns(ans, pronouns_1_2)),
        ("no_abbreviations", lambda ans: check_abbreviations(ans)),
        ("no_title", lambda ans: check_title(ans))
    ]

    for name, func in funcs:
        if name == "summary_similarity":
            valid, violated, sim = func(student_answer)
            sim_value = sim
        else:
            valid, violated = func(student_answer)

        results[name] = {"valid": bool(valid), "violated_words": violated}
        if name == "summary_similarity":
            results[name]["similarity"] = sim_value

        if not valid:
            score = 0

    return {"score": score, "details": results}

# ---------- ประเมินทั้ง DataFrame ----------
def evaluate_students(df):
    all_results = []
    for idx, row in df.iterrows():
        ans = row.get("student_answer_1", "")
        result = validate_student_answer(ans)

        row_result = row.to_dict()
        row_result.update({
            "score": result["score"],
            "similarity": result["details"]["summary_similarity"].get("similarity", None),
            "violations": json.dumps(result["details"], ensure_ascii=False)
        })
        all_results.append(row_result)

    return pd.DataFrame(all_results)

# ---------- ตัวอย่างเรียกใช้ ----------
if __name__ == "__main__":
    input_csv = "/content/drive/MyDrive/S3(Sheet1).csv"
    output_csv = "/content/sample_data/S3_results2.csv"   # ไฟล์ผลลัพธ์ที่ต้องการบันทึก

    df = pd.read_csv(input_csv)
    results_df = evaluate_students(df)

    # บันทึกเป็น CSV
    results_df.to_csv(output_csv, index=False, encoding="utf-8-sig")

    print("✅ ประเมินเสร็จสิ้น บันทึกไฟล์แล้วที่:", output_csv)
    print(results_df.head())