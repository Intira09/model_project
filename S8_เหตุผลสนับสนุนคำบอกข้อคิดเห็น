from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from pythainlp.tokenize import word_tokenize
import requests
import time

student_answer = """""เห็นด้วยเพราะในทุกวันนี้สื่อออนไลน์มีความจำเป็นในการดำรงชีวิตประจำวันไปแล้วโดย
ที่เป็นแบบนี้เพราะว่าการรับข้อมูลข่าวสารจากโทรศัพท์มือถือรวดเร็วกว่าและเข้าใจโลกในยุค
สมัยนี้ไวกว่าและสามารถสร้างความบรรเทิง ได้ตัวอย่างเช่นอ่านข่าวจากเฟซบุ๊ค ดูหนัง
ฟังเพลง เล่นเกมและหารายได้จากการเทรดหุ้น ณ ตอนนี้สื่อออนไลน์เลยมีความจำเป็นต่อ
การใช้ชีวิตประจำวันอย่างมาก"""""

reference_article = """สื่อสังคม (Social Media) หรือที่คนทั่วไปเรียกว่า สื่อออนไลน์ หรือ สื่อสังคม ออนไลน์ นั้น เป็นสื่อหรือช่องทางที่แพร่กระจายข้อมูลข่าวสารในรูปแบบต่างๆ ได้อย่างรวดเร็วไปยังผู้คนที่อยู่ทั่วทุกมุมโลกที่สัญญาณโทรศัพท์เข้าถึง เช่น การนําเสนอข้อดีนานาประการของสินค้าชั้นนํา สินค้าพื้นเมืองให้เข้าถึงผู้ซื้อได้
ทั่วโลก การนําเสนอข้อเท็จจริงของข่าวสารอย่างตรงไปตรงมา การเผยแพร่ งานเขียนคุณภาพบนโลกออนไลน์แทนการเข้าสํานักพิมพ์ เป็นต้น จึงกล่าวได้ว่า เราสามารถใช้สื่อสังคมออนไลน์ค้นหาและรับข้อมูลข่าวสารที่มีประโยชน์ได้เป็นอย่างดี
  อย่างไรก็ตาม หากใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวัง หรือขาดความรับผืดชอบต่อสังคมส่วนรวม ไม่ว่าจะเป็นการเขียนแสดงความคิดเห็นวิพากษ์วิจารณ์ผู้อื่นในทางเสียหาย การนำเสนอผลงานที่มีเนื้อหาล่อแหลมหรือชักจูงผู้รับสารไปในทางไม่เหมาะสม หรือการสร้างกลุ่มเฉพาะที่ขัดต่อศีลธรรมอันดีของสังคมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฎหมายทั้งการพนัน การขายของ
ผิดกฎหมาย เป็นต้น การใช้สื่อสังคมออนไลน์ในลักษณะดังกล่าวจึงเป็นการใช้ที่เป็นโทษแก่สังคม
	ปัจจุบันผู้คนจํานวนไม่น้อยนิยมใช้สื่อสังคมออนไลน์เป็นช่องทางในการทํา การตลาดทั้งในทางธุรกิจ สังคม และการเมือง จนได้ผลดีแบบก้าวกระโดด ทั้งนี้ เพราะสามารถเข้าถึงกลุ่มคนทุกเพศ ทุกวัย และทุกสาขาอาชีพโดยไม่มีข้อจํากัดเรื่อง เวลาและสถานที่ กลุ่มต่างๆ ดังกล่าวจึงหันมาใช้สื่อสังคมออนไลน์เพื่อสร้างกระแสให้ เกิดความนิยมชมชอบในกิจการของตน ด้วยการโฆษณาชวนเชื่อทุกรูปแบบจนลูกค้า เกิดความหลงใหลข้อมูลข่าวสาร จนตกเป็นเหยื่ออย่างไม่รู้ตัว เราจึงควรแก้ปัญหา การตกเป็นเหยื่อทางการตลาดของกลุ่มมิจฉาชีพด้วยการเร่งสร้างภูมิคุ้มกันรู้ทันสื่อไม่ตกเป็นเหยื่อทางการตลาดโดยเร็ว
	แม้ว่าจะมีการใช้สื่อสังคมออนไลน์ในทางสร้างสรรค์สิ่งที่ดีให้แก่สังคม ตัวอย่างเช่น การเตือนภัยให้แก่คนในสังคมได้อย่างรวดเร็ว การส่งต่อข้อมูลข่าวสาร เพื่อระดมความช่วยเหลือให้แก่ผู้ที่กําลังเดือดร้อน เป็นต้น แต่หลายครั้งคนในสังคมก็ อาจรู้สึกไม่มั่นใจเมื่อพบว่าตนเองถูกหลอกลวงจากคนบางกลุ่มที่ใช้สื่อสังคมออนไลน์
เป็นพื้นที่แสวงหาผลประโยชน์ส่วนตัว จนทําให้เกิดความเข้าใจผิดและสร้างความ เสื่อมเสียให้แก่ผู้อื่น ดังนั้นการใช้สื่อสังคมออนไลน์ด้วยเจตนาแอบแฝงจึงมีผลกระทบต่อความน่าเชื่อถือของข้อมูลข่าวสารโดยตรง"""

main_idea_keywords = [
    "สื่อสังคมออนไลน์เป็นช่องทางที่ใช้ในการเผยแพร่ ค้นหา รับข้อมูลข่าวสาร",
    "การใช้สื่อสังคมออนไลน์อย่างไม่ระมัดระวังหรือขาดความรับผิดชอบจะเกิดโทษ ผลเสีย ข้อเสีย ผลกระทบหรือสิ่งไม่ดี",
    "ผู้ใช้ต้องรู้เท่าทันสื่อสังคมออนไลน์",
    "การใช้สื่อสังคมออนไลน์ด้วยเจตนาแอบแฝงมีผลกระทบต่อความน่าเชื่อถือของข้อมูลข่าวสาร"
]

example_keywords = [
    "การนำเสนอข้อดีนานาประการของสินค้าชั้นนำ",
    "สินค้าพื้นเมืองให้เข้าถึงผู้ซื้อได้ทั่วโลก",
    "การนำเสนอข้อเท็จจริงของข่าวสารอย่างตรงไปตรงมา",
    "การเผยแพร่งานเขียนคุณภาพบนโลกออนไลน์แทนการเข้าสำนักพิมพ์",
    "การเขียนแสดงความคิดเห็นวิพากษ์วิจารณ์ผู้อื่นในทางเสียหาย",
    "การนำเสนอผลงานที่มีเนื้อหาล่อแหลมหรือชักจูงผู้รับสารไปในทางไม่เหมาะสม",
    "การสร้างกลุ่มเฉพาะที่ขัดต่อศีลธรรมอันดีของสังคมตลอดจนใช้เป็นช่องทางในการกระทำผิดกฎหมาย",
    "การพนัน",
    "การขายของผิดกฎหมาย",
    "การเตือนภัยให้แก่คนในสังคมได้อย่างรวดเร็ว",
    "การส่งต่อข้อมูลข่าวสาร เพื่อระดมความช่วยเหลือให้แก่ผู้ที่กำลังเดือดร้อน"
]

# ------------------------- Utils -------------------------
def split_sentences(text):
    for ch in ['\n', '\r', '\t']:
        text = text.replace(ch, ' ')
    sentences = text.replace('?', '।').replace('!', '।').replace('.', '।').split('।')
    return [s.strip() for s in sentences if s.strip()]

def tokenize_thai(text):
    return word_tokenize(text, keep_whitespace=False)

def clean_text(text):
    return " ".join(text.split())

# ------------------------- PART 5: ตรวจคำบอกข้อคิดเห็น -------------------------
def check_opinion(text):
    tokens = tokenize_thai(text)
    if "ไม่เห็นด้วย" in tokens:
        return "ไม่เห็นด้วย"
    if "เห็นด้วย" in tokens:
        return "เห็นด้วย"
    return None

# ------------------------- SBERT -------------------------
# หมายเหตุ: ชื่อโมเดลนี้ถ้าไม่มีใน hub ของ sentence-transformers
# จะมี warning และใช้ mean pooling ให้โดยอัตโนมัติ (ยอมรับได้)
sbert_model = SentenceTransformer('airesearch/wangchanberta-base-att-spm-uncased')

def sbert_similarity(a, b):
    va = sbert_model.encode([a])
    vb = sbert_model.encode([b])
    score = cosine_similarity(va, vb)[0][0]
    print(f"[SBERT] similarity = {score:.4f}")
    return float(score)

# ------------------------- ตรวจใจความสำคัญ -------------------------
def check_main_idea(student_answer, keywords, threshold=0.6):
    found = False
    for kw in keywords:
        score = sbert_similarity(student_answer, kw)
        print(f"[Main Idea] '{kw}' → similarity = {score:.4f}")
        if score >= threshold:
            found = True
    return found

# ------------------------- ตรวจคัดลอกตัวอย่าง (ปรับปรุง) -------------------------
def check_example_copy(student_answer, example_keywords, threshold=0.6):
    # SBERT similarity
    max_score = -1.0
    matched_keyword_sbert = None
    for ex in example_keywords:
        score = sbert_similarity(student_answer, ex)
        print(f"[Example Copy SBERT] '{ex}' → similarity = {score:.4f}")
        if score >= threshold and score > max_score:
            max_score = score
            matched_keyword_sbert = ex

    # Keyword matching
    matched_keyword_kw = None
    for kw in example_keywords:
        if kw in student_answer:
            matched_keyword_kw = kw
            print(f"[Example Copy Keyword] พบคำตรงตัว: {kw}")
            break

    # ถ้าเจอจากวิธีใดวิธีหนึ่งก็ถือว่าคัดลอก
    copied_flag = matched_keyword_sbert is not None or matched_keyword_kw is not None
    matched_keyword = matched_keyword_sbert if matched_keyword_sbert else matched_keyword_kw

    return copied_flag, matched_keyword


# ------------------------- iAppQA -------------------------
IAPPQA_ENDPOINT = "https://api.aiforthai.in.th/qaiapp"
IAPPQA_HEADERS = {
    "Apikey": "", # add Apikey
    "Content-Type": "application/json"
}

def get_iappqa_answer_retry(question, context, wait_seconds=3):
    while True:
        try:
            payload = {"question": question, "document": context}
            r = requests.post(IAPPQA_ENDPOINT, json=payload, headers=IAPPQA_HEADERS, timeout=30)
            if r.status_code == 200:
                ans = r.json().get("answer", "")
                bad = (not ans) or (ans == "ไม่สามารถตรวจได้") or ans.lower().startswith("error") or ("provided context is empty" in ans.lower())
                if not bad:
                    return ans
            print("ยังไม่ได้คำตอบที่ต้องการ รอ retry...")
        except Exception as e:
            print(f"Exception - {e}")
        time.sleep(wait_seconds)

# ------------------------- MAIN EVALUATION -------------------------
def evaluate_student_answer(student_answer, reference_article, main_idea_keywords, example_keywords):
    cleaned_answer = clean_text(student_answer)
    opinion_txt = check_opinion(cleaned_answer) or "ไม่มีคำบอกข้อคิดเห็น"

    iapp_questions = [
        "เหตุผลสนับสนุนของสื่อสังคมออนไลน์มีความจำเป็นในชีวิตไหม ตอบ มี หรือ ไม่มี",
        f"มีเหตุผลที่ไม่สอดคล้องกับคำว่า {opinion_txt} ตอบ มี หรือ ไม่มี",
        "มีบางการยกตัวอย่างไม่สอดคล้องกับเหตุผลสนับสนุน  ตอบ มี หรือ ไม่มี",
        "การยกตัวอย่าง",
        "การยกตัวอย่างสอดคล้องกับเหตุผลสนับสนุน ตอบ สอดคล้อง หรือ ไม่สอดคล้อง",
        "เหตุผลสอดคล้องกับข้อคิดเห็น ตอบ สอดคล้อง หรือ ไม่สอดคล้อง"
    ]

    results = {
        "iappqa": {},
        "copied_article": 0.0,
        "has_main_idea": False,
        "copied_example": False,
        "copied_example_keyword": None,
        "has_opinion": False
    }

    print("🔍 ตรวจสอบ iAppQA:")
    for q in iapp_questions:
        ans = get_iappqa_answer_retry(q, cleaned_answer)
        results["iappqa"][q] = ans
        print(f" - {q}: {ans}")

    print("\n📌 ตรวจการคัดลอกบทความ:")
    results["copied_article"] = sbert_similarity(cleaned_answer, reference_article)
    print(" - คัดลอกบทความ:", results["copied_article"])

    print("\n📌 ตรวจใจความสำคัญ:")
    results["has_main_idea"] = check_main_idea(cleaned_answer, main_idea_keywords)
    print(" - ครอบคลุมใจความสำคัญ:", results["has_main_idea"])

    print("\n📌 ตรวจคัดลอกตัวอย่าง:")
    results["copied_example"], results["copied_example_keyword"] = check_example_copy(cleaned_answer, example_keywords)
    print(f" - คัดลอกตัวอย่างจากบทความ: {results['copied_example']}")
    if results["copied_example"]:
       print(f"   เหมือนตัวอย่าง: {results['copied_example_keyword']}")


    print("\n📌 ตรวจคำบอกข้อคิดเห็น:")
    results["has_opinion"] = check_opinion(cleaned_answer)
    print(" - มีคำว่า 'เห็นด้วย' หรือ 'ไม่เห็นด้วย':", results["has_opinion"])

    return results

# ------------------------- CALCULATE SCORE -------------------------
def calculate_score(results, copied_article_threshold=0.90):
    iappqa = results.get("iappqa", {})

    # คำบอกข้อคิดเห็น
    has_opinion_flag = results.get("has_opinion") in ["เห็นด้วย", "ไม่เห็นด้วย"]

    # เหตุผลสนับสนุน (ถามว่า มี หรือ ไม่มี)
    reason_support = iappqa.get("เหตุผลสนับสนุนของสื่อสังคมออนไลน์มีความจำเป็นในชีวิตไหม ตอบ มี หรือ ไม่มี", "").strip()
    reason_support_flag = (reason_support == "มี")

    # ไม่มีเหตุผลที่ไม่สอดคล้องกับ opinion (คำตอบที่ดีควรเป็น "ไม่มี")
    opinion_text = results.get("has_opinion") if has_opinion_flag else ""
    reason_inconsistent_raw = iappqa.get(f"มีเหตุผลที่ไม่สอดคล้องกับคำว่า {opinion_text} ตอบ มี หรือ ไม่มี", "").strip()
    # True แปลว่า "ไม่มีเหตุผลที่ไม่สอดคล้อง"
    reason_inconsistent_flag = (reason_inconsistent_raw == "ไม่มี")

    # ไม่มีตัวอย่างที่ไม่สอดคล้อง (คำตอบที่ดีควรเป็น "ไม่มี")
    example_inconsistent_raw = iappqa.get("มีบางการยกตัวอย่างไม่สอดคล้องกับเหตุผลสนับสนุน  ตอบ มี หรือ ไม่มี", "").strip()
    example_all_consistent_flag = (example_inconsistent_raw == "ไม่มี")

    # มีการยกตัวอย่าง และตัวอย่างสอดคล้อง
    example_given_text = iappqa.get("การยกตัวอย่าง", "").strip()
    example_given_flag = bool(example_given_text)
    example_consistent_flag = iappqa.get(
        "การยกตัวอย่างสอดคล้องกับเหตุผลสนับสนุน ตอบ สอดคล้อง หรือ ไม่สอดคล้อง", ""
    ).strip().startswith("สอดคล้อง")

    # เหตุผลสอดคล้องกับข้อคิดเห็น
    reason_vs_opinion_consistent = iappqa.get(
        "เหตุผลสอดคล้องกับข้อคิดเห็น ตอบ สอดคล้อง หรือ ไม่สอดคล้อง", ""
    ).strip().startswith("สอดคล้อง")

    # ตรวจคัดลอก
    copied_example_flag = results.get("copied_example", False)
    copied_article_flag = results.get("copied_article", 0.0) >= copied_article_threshold

    # ใจความสำคัญ
    has_main_idea_flag = results.get("has_main_idea", False)

    # --------------------- กฎให้คะแนน ---------------------
    # 0 คะแนน: เหตุผลตอบ "ไม่มี" หรือ คัดลอกบทความหนัก หรือ ไม่มีใจความสำคัญ
    if  copied_article_flag or (not has_main_idea_flag): #(not reason_support_flag)
        return {"score": 0, "details": "เหตุผลสนับสนุน = ไม่มี หรือ คัดลอกบทความ หรือ ไม่มีใจความสำคัญ"}

    # 8 คะแนน: สมบูรณ์ที่สุด
    if (has_opinion_flag and reason_support_flag and reason_inconsistent_flag
        and example_all_consistent_flag and example_given_flag and example_consistent_flag
        and reason_vs_opinion_consistent and (not copied_example_flag) and (not copied_article_flag)
        and has_main_idea_flag):
        return {"score": 8, "details": "ครบถ้วน: มีข้อคิดเห็น เหตุผลสอดคล้อง ตัวอย่างสอดคล้อง ไม่คัดลอก และมีใจความสำคัญ"}

    # 6 คะแนน: ดีมาก แต่ตัวอย่างคัดลอกจากบทความ
    if (has_opinion_flag and reason_support_flag and reason_inconsistent_flag
        and example_all_consistent_flag and example_given_flag and example_consistent_flag
        and reason_vs_opinion_consistent and copied_example_flag and (not copied_article_flag)
        and has_main_idea_flag):
        return {"score": 6, "details": "ดีมาก: ตัวอย่างสอดคล้อง แต่คัดลอกจากบทความ"}

    # 4 คะแนน: มีบางอย่างยังไม่ครบถ้วน
    # กรณี 1: มีตัวอย่างแต่บางตัวอย่างไม่สอดคล้อง
    if (has_opinion_flag and reason_support_flag and reason_inconsistent_flag
        and (not example_all_consistent_flag) and example_given_flag
        and (not copied_article_flag) and has_main_idea_flag):
        return {"score": 4, "details": "เหตุผลผ่าน มีข้อคิดเห็น แต่มีตัวอย่างบางส่วนไม่สอดคล้อง"}

    # กรณี 2: ไม่มีการยกตัวอย่าง แต่ส่วนหลักผ่าน
    if (has_opinion_flag and reason_support_flag #and reason_inconsistent_flag
        and (not example_given_flag) and (not copied_article_flag) and has_main_idea_flag):
        return {"score": 4, "details": "เหตุผลผ่าน มีข้อคิดเห็น แต่ไม่มีการยกตัวอย่าง"}

    # 2 คะแนน: ผ่านบางส่วน (เช่น ไม่มีคำบอกข้อคิดเห็น แต่เหตุผลผ่าน)
    if ((not reason_inconsistent_flag) and (not has_opinion_flag) and reason_support_flag and has_main_idea_flag and (not copied_article_flag)):
        return {"score": 2, "details": "เหตุผลผ่านและมีใจความสำคัญ แต่ไม่มีคำบอกข้อคิดเห็น"}

    # กรณีทั่วไปที่ผ่านเกณฑ์หลักแต่ยังไม่เข้ากรณีด้านบน (กันคะแนนเป็น None)
    return {"score": 2, "details": "ผ่านเกณฑ์หลักบางส่วน (เหตุผล/ใจความ/ความสอดคล้อง) แต่ยังไม่ครบถ้วน"}

# ------------------------- Run -------------------------
if __name__ == "__main__":
    results = evaluate_student_answer(student_answer, reference_article, main_idea_keywords, example_keywords)
    score = calculate_score(results)
    print(f"\nคะแนนที่ได้: {score}")
